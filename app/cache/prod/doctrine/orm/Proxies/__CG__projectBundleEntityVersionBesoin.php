<?php

namespace Proxies\__CG__\projectBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class VersionBesoin extends \projectBundle\Entity\VersionBesoin implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'id', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'nom', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'descp', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'date', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'curent', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'numVersion', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'besoin', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'redact', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'exigence', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'doc');
        }

        return array('__isInitialized__', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'id', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'nom', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'descp', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'date', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'curent', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'numVersion', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'besoin', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'redact', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'exigence', '' . "\0" . 'projectBundle\\Entity\\VersionBesoin' . "\0" . 'doc');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (VersionBesoin $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', array($nom));

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', array());

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescp($descp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescp', array($descp));

        return parent::setDescp($descp);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescp', array());

        return parent::getDescp();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array());

        return parent::setDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurent($curent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurent', array($curent));

        return parent::setCurent($curent);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurent', array());

        return parent::getCurent();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumVersion($numVersion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumVersion', array($numVersion));

        return parent::setNumVersion($numVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumVersion', array());

        return parent::getNumVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getBesoin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBesoin', array());

        return parent::getBesoin();
    }

    /**
     * {@inheritDoc}
     */
    public function setBesoin($besoin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBesoin', array($besoin));

        return parent::setBesoin($besoin);
    }

    /**
     * {@inheritDoc}
     */
    public function getRedact()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRedact', array());

        return parent::getRedact();
    }

    /**
     * {@inheritDoc}
     */
    public function setRedact($redact)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRedact', array($redact));

        return parent::setRedact($redact);
    }

    /**
     * {@inheritDoc}
     */
    public function setExigence(\projectBundle\Entity\Exigence $exigence)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExigence', array($exigence));

        return parent::setExigence($exigence);
    }

    /**
     * {@inheritDoc}
     */
    public function getExigence()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExigence', array());

        return parent::getExigence();
    }

    /**
     * {@inheritDoc}
     */
    public function getDoc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDoc', array());

        return parent::getDoc();
    }

    /**
     * {@inheritDoc}
     */
    public function setDoc($doc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDoc', array($doc));

        return parent::setDoc($doc);
    }

}
